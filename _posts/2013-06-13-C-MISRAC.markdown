---
layout: post
title:  "MISRA C 规则"
date:   2013-06-13 22:41:23 +0800
categories: C
tags: C
language: chinese
toc: false
sidebar: true
about: true
author: david.dong
description: 本文整理出了 MISRA C 编程规范的内容，方便查找。有需要的同学可以参考这部分内容。
keywords: MISRA C
---
最近工作中有接触到MISRA C的规范，为了方便以后查找，这里把规则都记录下来。

MISRA C编程规范（MISRA C Coding Standard），是针对C 语言编程的软件开发标准。它的目标促进C代码在嵌入式系统中的安全性、可移植性和可靠性。

*以下内容为转贴。*<br>
>
Rule 1. 严格遵循ANSI C89标准，不允许任何扩展。
>
Rule 3. 如果要嵌入汇编语言，则必须将所有汇编语句包装在C函数里，而且这些函数中只有汇编语句，
没有常规C语句。    
>
Rule 7. 不得使用三元操作符 `（? : )`
>
Rule 10. 不得残留被注释掉的废代码。
>
Rule 11. 所有标识符不超过31字符。
>
Rule 12. 不同名空间中的变量名不得相同。
例如：
{% highlight c %}
typedef struct MyStruct {... } MyStruct;  (违规）

struct Person {
    char* name;
    ...
};
char name[32];  （违规）
{% endhighlight %}
>
Rule 13. 不得使用 `char`, `int`, `float`, `double`, `long` 等基本类型，
应该用自己定义的类型显示表示类型的大小，
如 `CHAR8`, `UCHAR8`, `INT16`, `INT32`, `FLOAT32`, `LONG64`, `ULONG64` 等。
>
Rule 14. 不得使用类型 `char`，必须显示声明为 `unsigned char` 或者 `signed char`。
>
Rule 18. 所有数字常数应当加上合适的后缀表示类型，例如 51L, 42U, 34.12F 等。
>
Rule 19. 禁止使用八进制数。（因为 `086U` 这样的常数很容易引起误解）。
>
Rule 21. 不得定义与外部作用域中某个标识符同名的对象，以避免遮盖外部作用域中的标识符。
>
Rule 23. 具有文件作用域的对象尽量声名为 `static` 的。
>
Rule 24. 在同一个编译单元中，同一个标识符不应该同事具有内部链接和外部链接的声名。
>
这里我略作说明：
我们通常将一些放在头文件里的变量声名为“外部链接”的，如：
{% highlight c %}
  extern UINT32 g_count;  // 俗话叫变量声明（对应于变量定义，不分配实际空间）
{% endhighlight %}
>对于“使用”这个变量的.c文件来说，这很好，因为 g_count 始终保持外部链接性质。
>可是对于定义 g_count（实际分配空间）的 .c 文件来说，如果包含了上述的头文件，
>则在这个编译单元里就发生了内部链接和外部链接的冲突。
>
>解决办法是，定义 g_count 的文件尽量不要包含声名 g_count 的头文件。
>个人感觉这不是任何时候都做得到的，尤其是在对付遗留代码的时候。
>
Rule 25. 具有外部链接性质的标识符应该只声明一次。
>
Rule 27. 外部对象不得在多个文件中声名。
>
Rule 28. 禁止使用 `register` 关键字。
>
Rule 29. 自动对象（栈对象）使用前必须赋初值。
>
Rule 33. 操作符 `&&` 和 `||` 的右侧表达式不得具有副作用（side-effect）。
也就是说，象 
{% highlight c %}
  if (x == 20 && ++y == 19)
{% endhighlight %}
>这样的表达式被禁止。
>
Rule 35. 在返回布尔值的表达式中不得出现赋值操作。
也就是说，我们常用的 
{% highlight c %}
if (!(fp = fopen("fname", "r"))) { /* error */ }
{% endhighlight %}
>被禁止。
>
Rule 37. 不得对有符号数施加位操作，例如 `1 << 4` 将被禁止，必须写 `1UL << 4`;
>
Rule 39. 不得对有符号表达式施加一元 `-` 操作符。
>
Rule 40. 不得对有副作用的表达式施加 `sizeof` 操作符。
>
Rule 42. 除了循环控制语句，不得使用逗号表达式。
>
Rule 44. 禁止冗余的显式转型。
>
>比如: 
{% highlight c %}
double pi = (double) 3.1416F;
{% endhighlight %}
>
Rule 45. 禁止从任意类型到指针的强制转型，禁止从指针到任意类型的强制转型。
>
例如：
{% highlight c %}
void* p = (void*)0xFFFF8888UL;
{% endhighlight %}
>
Rule 49. 显示测试值是否为零。
>
Rule 50. 不得显式判断浮点数的相等性和不等性。
>
Rule 52. 不得遗留“永远不会用到”的代码。
>
Rule 53. 所有非空语句必须具有副作用。
>
Rule 55. 除了 `switch` 语句，不得使用标号 (label)。
>
Rule 56. 不得使用 `goto`.
>
Rule 57. 不得使用 `continue`。
>
Rule 58. 除了 `switch` 语句，不得使用 `break`.
>
Rule 59. if, else if, else, while, do..while, for 语句块必须使用 {} 括起。
>
Rule 60. 任何 if..else if 语句，最后必须有一个收尾的 else。
>
例如：
{% highlight c %}
if (ans == 'Y') {
   ...
}
else if (ans == 'N') {
   ...
}
else {
   ;
}
{% endhighlight %}
>
Rule 67. 循环计数器的值不得在循环体内修改。
>
Rule 70. 禁止任何直接和间接的递归函数调用。
>
Rule 82. 每个函数只能有一个推出点。
>
Rule 86. 如果一个函数可能返回错误信息，则调用后必须加以测试。
>
Rule 92. 不应该使用 `#undef`。
>
Rule 95. 不得将宏作为参数传给宏函数
>
Rule 98. 在一个宏定义中，`#` 或 `##` 符号只能出现一次。
>
Rule 101. 禁止指针运算（代之以数组下标运算）。
>
Rule 102. 禁止超过两级的指针。
>
Rule 104. 禁止使用指向函数的非常量指针。
>
>Rule 106. 不得将栈对象的地址传给外部作用域的对象。

后面的规则针对实时嵌入式系统，对其他类型的开发未必适用，如：

>
Rule 118. 禁止使用动态堆分配（也就是不得使用 `malloc`, `calloc` 和 `realloc`）。
>
Rule 119. 禁止使用 `errno`。
>
Rule 120. 禁止使用 `offsetof`。
>
Rule 121. 禁止使用 `<locale.h>`。
>
Rule 122. 禁止使用 `setjmp`, `longjmp`。
>
Rule 123. 禁止使用 `<signal.h>`。
>
Rule 124. 禁止使用 `<stdio.h>`（不能用 printf, scanf了！）。
>
Rule 125. 禁止使用 `atoi`, `atof`, `atol`。（这个我很赞成，建议使用 `strtol`, `strtod` 等函数）。
>
Rule 126. 禁止使用 `abort`, `exit`, `getenv`。
>
Rule 127. 禁止使用 `<time.h>`。
>
