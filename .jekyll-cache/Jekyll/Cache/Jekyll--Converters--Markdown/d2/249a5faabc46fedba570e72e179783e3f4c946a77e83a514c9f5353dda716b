I"x<p>Java的序列化提供了一种保存对象状态的机制，之所以要用到序列化是因为有时我们会在对象的生命期结束后需要把对象状态保存下来，通常是存放到外部的媒介上，比如文件，磁盘或网络上。并且在需要时能够通过一种机制来恢复。序列化能够在不同的JVM之间共享数据。<br />
实现类的序列化在语法上非常简单，只需要实现Serializable接口即可。Serializable接口没有需要实现的方法（这是一个”标记接口-tagging interface”)，只是标明该类的对象需要序列化。
通常我们在构建javabean的时候，定义Bean时要实现这个接口，因为Bean的属性状态一般都是需要保存的。<br />
关于序列化，需要注意一下几点：<br /></p>
<ol>
  <li>序列化保存的是对象的状态。状态包括对象的非静态成员变量（包括声明为private的变量），不能保存任何的<strong>成员方法</strong>和<strong>静态的成员变量</strong>。</li>
  <li>当一个父类实现序列化时,<strong>子类自动序列化</strong>,不需要显式实现Serializable接口。</li>
  <li>当一个对象的实例变量引用其他对象,序列化该对象时也把<strong>引用对象序列化</strong>。</li>
  <li>序列化的对象包括基本数据类型，所有集合类以及其他许多东西，还有对象。但是<strong>并非所有的对象都可以序列化</strong>。</li>
  <li>对象序列化不仅保存了对象的状态，而且还能<strong>保存对象内包含的所有引用的对象状态</strong>，一直追踪知道所有的引用的对象被保存。</li>
  <li>使用<strong><em>transient</em></strong>关键字修饰的的变量，在序列化对象的过程中，该属性不会被序列化。常用于当某些变量不想被序列化，同是又不适合使用static关键字声明时。</li>
</ol>
:ET