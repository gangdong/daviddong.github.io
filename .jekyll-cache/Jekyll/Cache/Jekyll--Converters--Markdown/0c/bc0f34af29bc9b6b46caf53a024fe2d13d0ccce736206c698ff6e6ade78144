I"81<p><img src="/assets/image/fingerprint-enroll-cover.jpeg" alt="cover" />  <br />
When we do fingerprint enrollment in android device, it will generate a fingerprint template that contains the user’s fingerprint information in a specified directory (for example, /data/vendor_de/0/fpdata/user.db), which depends on the system configuration.</p>

<p>During the template is being generated, there is a series of APIs calling in android system internally. Let’s have a look at this process.</p>

<div class="separator"></div>

<h2 class="no_toc">Table of content</h2>

<ul id="markdown-toc">
  <li><a href="#preenroll" id="markdown-toc-preenroll">preEnroll()</a></li>
  <li><a href="#enroll" id="markdown-toc-enroll">enroll()</a></li>
  <li><a href="#postenroll" id="markdown-toc-postenroll">postEnroll()</a></li>
</ul>
<div class="separator"></div>

<p>Android sets some standard APIs in HAL layer for fingerprint event handling. Refer to Android P source code at <a href="https://www.androidos.net.cn/android/10.0.0_r6/xref/hardware/interfaces/biometrics/fingerprint/2.1/default/BiometricsFingerprint.h">BiometricsFingerprint.h</a> and <a href="https://www.androidos.net.cn/android/10.0.0_r6/xref/hardware/interfaces/biometrics/fingerprint/2.1/default/BiometricsFingerprint.cpp">BiometricsFingerprint.cpp</a>.</p>

<p>The fingerprint APIs definition in Android BiometricsFingerprint.h.<br /></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">Return</span><span class="o">&lt;</span><span class="n">uint64_t</span><span class="o">&gt;</span> <span class="n">setNotify</span><span class="p">(</span><span class="n">const</span> <span class="n">sp</span><span class="o">&lt;</span><span class="no">IBiometricsFingerprintClientCallback</span><span class="o">&gt;&amp;</span> <span class="n">clientCallback</span><span class="p">)</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="n">uint64_t</span><span class="o">&gt;</span> <span class="n">preEnroll</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="no">RequestStatus</span><span class="o">&gt;</span> <span class="n">enroll</span><span class="p">(</span><span class="n">const</span> <span class="n">hidl_array</span><span class="o">&lt;</span><span class="n">uint8_t</span><span class="p">,</span> <span class="mi">69</span><span class="o">&gt;&amp;</span> <span class="n">hat</span><span class="p">,</span> <span class="n">uint32_t</span> <span class="n">gid</span><span class="p">,</span> <span class="n">uint32_t</span> <span class="n">timeoutSec</span><span class="p">)</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="no">RequestStatus</span><span class="o">&gt;</span> <span class="n">postEnroll</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="n">uint64_t</span><span class="o">&gt;</span> <span class="n">getAuthenticatorId</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="no">RequestStatus</span><span class="o">&gt;</span> <span class="n">cancel</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="no">RequestStatus</span><span class="o">&gt;</span> <span class="n">enumerate</span><span class="p">()</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="no">RequestStatus</span><span class="o">&gt;</span> <span class="n">remove</span><span class="p">(</span><span class="n">uint32_t</span> <span class="n">gid</span><span class="p">,</span> <span class="n">uint32_t</span> <span class="n">fid</span><span class="p">)</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="no">RequestStatus</span><span class="o">&gt;</span> <span class="n">setActiveGroup</span><span class="p">(</span><span class="n">uint32_t</span> <span class="n">gid</span><span class="p">,</span> <span class="n">const</span> <span class="n">hidl_string</span><span class="o">&amp;</span> <span class="n">storePath</span><span class="p">)</span> <span class="n">override</span><span class="p">;</span>
<span class="no">Return</span><span class="o">&lt;</span><span class="no">RequestStatus</span><span class="o">&gt;</span> <span class="n">authenticate</span><span class="p">(</span><span class="n">uint64_t</span> <span class="n">operationId</span><span class="p">,</span> <span class="n">uint32_t</span> <span class="n">gid</span><span class="p">)</span> <span class="n">override</span><span class="p">;</span></code></pre></figure>

<h2 id="preenroll">preEnroll()</h2>

<p>When user starts to enroll the fingerprint, the method <code class="language-plaintext highlighter-rouge">preEnroll()</code> will be called firstly, the fingerprint IC vendor needs to override this method to complete below task.</p>

<ul>
  <li>generates and saves a 64 bit random number (challenge) in the fingerprint TA. 
This random number has two uses:
    <ol>
      <li>Return to the REE upper layer to fill in the authenticated token challenge in the enroll.</li>
      <li>TA will use it to preliminarily verify the next enroll to ensure that the enroll has not been tampered by a third party.</li>
    </ol>
  </li>
</ul>

<h2 id="enroll">enroll()</h2>
<p>If the <code class="language-plaintext highlighter-rouge">preEnroll()</code> is proper returned, <code class="language-plaintext highlighter-rouge">enroll()</code> will be following called.<br /> 
Let’s see the definition of <code class="language-plaintext highlighter-rouge">enroll()</code>.</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">enroll</span><span class="p">)(</span><span class="k">struct</span> <span class="n">fingerprint_device</span> <span class="o">*</span><span class="n">dev</span><span class="p">,</span> <span class="k">const</span> <span class="n">hw_auth_token_t</span> <span class="o">*</span><span class="n">hat</span><span class="p">,</span>
          <span class="kt">uint32_t</span> <span class="n">gid</span><span class="p">,</span> <span class="kt">uint32_t</span> <span class="n">timeout_sec</span><span class="p">);</span></code></pre></figure>

<p>parameters:</p>
<ul>
  <li>hw_auth_token_t: this struct encloses the tokens of enrollment. <br /></li>
</ul>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="cm">/**
 * Data format for an authentication record used to prove successful authentication.
 */</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="nf">__attribute__</span><span class="p">((</span><span class="n">__packed__</span><span class="p">))</span>
<span class="p">{</span>
    <span class="kt">uint8_t</span> <span class="n">version</span><span class="p">;</span>  <span class="c1">// Current version is 0</span>
    <span class="kt">uint64_t</span> <span class="n">challenge</span><span class="p">;</span>
    <span class="kt">uint64_t</span> <span class="n">user_id</span><span class="p">;</span>             <span class="c1">// secure user ID, not Android user ID</span>
    <span class="kt">uint64_t</span> <span class="n">authenticator_id</span><span class="p">;</span>    <span class="c1">// secure authenticator ID</span>
    <span class="kt">uint32_t</span> <span class="n">authenticator_type</span><span class="p">;</span>  <span class="c1">// hw_authenticator_type_t, in network order</span>
    <span class="kt">uint64_t</span> <span class="n">timestamp</span><span class="p">;</span>           <span class="c1">// in network order</span>
    <span class="kt">uint8_t</span> <span class="n">hmac</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
<span class="p">}</span> <span class="n">hw_auth_token_t</span><span class="p">;</span></code></pre></figure>

<p><strong>version</strong>: version number of this token.<br />
<strong>challenge</strong>: it is the 64 bit random number to which preenroll was previously called to prevent the enroll from being counterfeited by a third party this time.<br />
<strong>user_id</strong>: Security ID, not Android user ID.<br />
<strong>authenticator_id</strong>: used to indicate different authentication permissions.Normally it indicates the fingerprint database ID.<br />
<strong>authenticator_type</strong>: 0x00 for gatekeeper, 0x01 for fingerprint.<br />
<strong>timestamp</strong>: last boot time stamp.<br />
<strong>hmac</strong>: a special key and SHA-256 algorithm are used to calculate the previous batch of parameters, and a HMAC value is obtained to ensure the legitimacy and security of the previous parameters.<br /></p>

<ul>
  <li>gid: Indicate which user enroll fingerprint (Anroid supports multiple users). The gid is used to set the store path of the fingerprint template in REE side.</li>
  <li>timeout_sec: timeout /second.</li>
</ul>

<p>The upper layer calls <code class="language-plaintext highlighter-rouge">enroll()</code> method and pass the parameters to fingerprint TA, fingerprint TA receives the token and authorize the token. There will be some works.</p>

<ol>
  <li>check if the received token-&gt;challenge same with the previous preEnroll phase challenge.</li>
  <li>check if the token version is same.</li>
  <li>check if authenticator_type is same.</li>
  <li>retrieve the data of hw_auth_token_t struct and calucate the HMAC, check if the calculated value is same with original.</li>
</ol>

<p>Once the token is authorized then the fingerprint TA switches the fingerprint sensor status to ready for enrollment and the fingerprint sensor will wait for the finger down event.</p>

<p>If the fingerprint sensor detects the finger down occurs, it will trigger the interrupt to inform the fingerprint TA capture the image. Fingerprint TA will capture the image and do a verification to check if the image is qualified. Uses <code class="language-plaintext highlighter-rouge">on_acquired()</code> callback method to notify the REE upper layer the result. If the image is not good, it will repeat the image capture for a pre-setted times. If the image is qualified, then fingerprint TA will start the enrollment in ALGO and call <code class="language-plaintext highlighter-rouge">on_enroll_result()</code> to notify the upper layer the remained sample times. Waiting for the finger up and do the next round image capture. This loop will be repeated until the required count of images are all achieved.</p>

<h2 id="postenroll">postEnroll()</h2>

<p>Once the enroll() is returned, <code class="language-plaintext highlighter-rouge">postEnroll()</code> will be called to finish one time enroll process.
the work of <code class="language-plaintext highlighter-rouge">postEnroll()</code> is to update the challenge of TA.</p>

<p>A simplest diagram of the whole enrollment process is</p>

<p>enrollment APIs calling.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">preEnroll</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">enroll</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">preEnroll</span><span class="p">()</span></code></pre></figure>

<p>enroll() execute flow.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">enroll</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">authorize</span> <span class="n">token</span><span class="o">-&gt;</span><span class="n">wait_for_finger_down</span><span class="o">-&gt;</span><span class="n">capture_image</span><span class="o">-&gt;</span><span class="n">algo_enroll</span><span class="o">-&gt;</span><span class="n">notify</span><span class="o">-&gt;</span><span class="n">repeat</span><span class="o">-&gt;</span><span class="n">remain</span> <span class="n">sample</span> <span class="n">times?</span><span class="o">-&gt;</span><span class="n">update_template</span><span class="o">-&gt;</span><span class="n">end_ernoll</span></code></pre></figure>
:ET