I"R
<h4 id="poll函数">poll()函数</h4>
<p>Linux 中 poll() 函数用来监听并等待多个文件描述符的属性变化。<br />
原型</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">poll</span><span class="p">(</span><span class="k">struct</span> <span class="n">pollfd</span> <span class="o">*</span><span class="n">fds</span><span class="p">,</span> <span class="n">nfds_t</span> <span class="n">nfds</span><span class="p">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="p">);</span>
</code></pre></div></div>
<p>其中fds：指向一个结构体数组的第0个元素的指针，每个数组元素都是一个struct pollfd结构，用于指定测试某个给定的fd的条件。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct pollfd{
	int fd;			//文件描述符
	short events;	//等待的事件
	short revents;	//实际发生的事件
};
</code></pre></div></div>
<p>fds结构体参数说明：</p>

<p>fd：每一个 pollfd 结构体指定了一个被监视的文件描述符，可以传递多个结构体，指示 poll() 监视多个文件描述符。</p>

<p>events：指定监测fd的事件（输入、输出、错误），每一个事件有多个取值，如下</p>

<p>revents：revents 域是文件描述符的操作结果事件，内核在调用返回时设置这个域。events 域中请求的任何事件都可能在 revents 域中返回.</p>

<p>注意：每个结构体的 events 域是由用户来设置，告诉内核我们关注的是什么，而 revents 域是返回时内核设置的，以说明对该描述符发生了什么事件</p>

<p>nfds：用来指定第一个参数数组元素个数</p>

<p>timeout：指定等待的毫秒数，无论 I/O 是否准备好，poll() 都会返回.</p>

<p>返回值：</p>

<p>成功时，poll() 返回结构体中 revents 域不为 0 的文件描述符个数；如果在超时前没有任何事件发生，poll()返回 0；</p>

<p>失败时，poll() 返回 -1，并设置 errno 为下列值之一：</p>

<p>EBADF：一个或多个结构体中指定的文件描述符无效。
EFAULT：fds 指针指向的地址超出进程的地址空间。
EINTR：请求的事件之前产生一个信号，调用可以重新发起。
EINVAL：nfds 参数超出 PLIMIT_NOFILE 值。
ENOMEM：可用内存不足，无法完成请求。</p>

<p><br />
<br />
作者：David Dong<br />
来源：https://gangdong.github.io/daviddong-blog.github.io/java/android/2019/04/14/bundle.html<br />
转载请注明出处。</p>
:ET